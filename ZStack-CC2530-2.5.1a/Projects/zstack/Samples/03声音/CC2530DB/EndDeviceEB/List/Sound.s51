///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        10/Jul/2017  15:26:49 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\03Щљвє\Source\Sound /
//                          .c                                                /
//    Command line       =  -f F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC253 /
//                          0-2.5.1a\Projects\zstack\Samples\03Щљвє\CC2530DB\ /
//                          ..\..\..\Tools\CC2530DB\f8wEndev.cfg (-DCPU32MHZ  /
//                          -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3        /
//                          -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f         /
//                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\03Щљвє\CC2530DB\..\ /
//                          ..\..\Tools\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO   /
//                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      /
//                          -DDEFAULT_CHANLIST=0x00004000                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 F:\ДњТы\ДњТы\ZStack-CC2530 /
//                          -2.5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\Samp /
//                          les\03Щљвє\Source\Sound.c -D NWK_AUTO_POLL -D     /
//                          ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D             /
//                          MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D             /
//                          xPOWER_SAVING -lC F:\ДњТы\ДњТы\ZStack-CC2530-2.5. /
//                          1a\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\0 /
//                          3Щљвє\CC2530DB\EndDeviceEB\List\ -lA              /
//                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\03Щљвє\CC2530DB\End /
//                          DeviceEB\List\ --diag_suppress Pe001,Pa010 -o     /
//                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\03Щљвє\CC2530DB\End /
//                          DeviceEB\Obj\ -e --no_code_motion --debug         /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\03Щљвє\CC2530DB\    /
//                          -I F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC253 /
//                          0-2.5.1a\Projects\zstack\Samples\03Щљвє\CC2530DB\ /
//                          ..\Source\ -I F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\Z /
//                          Stack-CC2530-2.5.1a\Projects\zstack\Samples\03Щљв /
//                          є\CC2530DB\..\..\..\ZMain\TI2530DB\ -I            /
//                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\03Щљвє\CC2530DB\..\ /
//                          ..\..\..\..\Components\hal\include\ -I            /
//                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\03Щљвє\CC2530DB\..\ /
//                          ..\..\..\..\Components\hal\target\CC2530EB\ -I    /
//                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\03Щљвє\CC2530DB\..\ /
//                          ..\..\..\..\Components\mac\include\ -I            /
//                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\03Щљвє\CC2530DB\..\ /
//                          ..\..\..\..\Components\mac\high_level\ -I         /
//                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\03Щљвє\CC2530DB\..\ /
//                          ..\..\..\..\Components\mac\low_level\srf04\ -I    /
//                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\03Щљвє\CC2530DB\..\ /
//                          ..\..\..\..\Components\mac\low_level\srf04\single /
//                          _chip\ -I F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStac /
//                          k-CC2530-2.5.1a\Projects\zstack\Samples\03Щљвє\CC /
//                          2530DB\..\..\..\..\..\Components\mt\ -I           /
//                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\03Щљвє\CC2530DB\..\ /
//                          ..\..\..\..\Components\osal\include\ -I           /
//                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\03Щљвє\CC2530DB\..\ /
//                          ..\..\..\..\Components\services\saddr\ -I         /
//                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\03Щљвє\CC2530DB\..\ /
//                          ..\..\..\..\Components\services\sdata\ -I         /
//                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\03Щљвє\CC2530DB\..\ /
//                          ..\..\..\..\Components\stack\af\ -I               /
//                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\03Щљвє\CC2530DB\..\ /
//                          ..\..\..\..\Components\stack\nwk\ -I              /
//                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\03Щљвє\CC2530DB\..\ /
//                          ..\..\..\..\Components\stack\sapi\ -I             /
//                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\03Щљвє\CC2530DB\..\ /
//                          ..\..\..\..\Components\stack\sec\ -I              /
//                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\03Щљвє\CC2530DB\..\ /
//                          ..\..\..\..\Components\stack\sys\ -I              /
//                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\03Щљвє\CC2530DB\..\ /
//                          ..\..\..\..\Components\stack\zdo\ -I              /
//                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\03Щљвє\CC2530DB\..\ /
//                          ..\..\..\..\Components\zmac\ -I                   /
//                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\03Щљвє\CC2530DB\..\ /
//                          ..\..\..\..\Components\zmac\f8w\ -Ohz             /
//    List file          =  F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\03Щљвє\CC2530DB\End /
//                          DeviceEB\List\Sound.s51                           /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME Sound

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?INTERRUPT_ENTER_XSP
        EXTERN ?INTERRUPT_LEAVE_XSP
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??InitKey2?relay
        FUNCTION ??InitKey2?relay,0203H
        PUBLIC ??Sound_Init?relay
        FUNCTION ??Sound_Init?relay,0203H
        PUBLIC ??Sound_MessageMSGCB?relay
        FUNCTION ??Sound_MessageMSGCB?relay,0203H
        PUBLIC ??Sound_ProcessEvent?relay
        FUNCTION ??Sound_ProcessEvent?relay,0203H
        PUBLIC ??Sound_SendTheMessage?relay
        FUNCTION ??Sound_SendTheMessage?relay,0203H
        PUBWEAK `??halKeyPort1Isr??INTVEC 123`
        PUBWEAK IEN2
        PUBLIC InitKey2
        FUNCTION InitKey2,0203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBWEAK P1DIR
        PUBWEAK P1IEN
        PUBWEAK P1IFG
        PUBWEAK PICTL
        PUBLIC Sound_ClusterList
        PUBLIC Sound_Init
        FUNCTION Sound_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Sound_MessageMSGCB
        FUNCTION Sound_MessageMSGCB,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 18, STACK
        PUBLIC Sound_NwkState
        PUBLIC Sound_ProcessEvent
        FUNCTION Sound_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC Sound_SendTheMessage
        FUNCTION Sound_SendTheMessage,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 41, STACK
        PUBLIC Sound_SimpleDesc
        PUBLIC Sound_TaskID
        PUBLIC Sound_TransID
        PUBLIC Sound_epDesc
        PUBLIC TempDATA
        PUBWEAK _A_IEN0
        PUBWEAK _A_IRCON2
        PUBWEAK _A_P1
        PUBLIC flag
        PUBLIC halKeyPort1Isr
        FUNCTION halKeyPort1Isr,021233H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
afRegister          SYMBOL "afRegister"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_set_event      SYMBOL "osal_set_event"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
osal_memcpy         SYMBOL "osal_memcpy"
HalLedSet           SYMBOL "HalLedSet"
osal_strlen         SYMBOL "osal_strlen"
AF_DataRequest      SYMBOL "AF_DataRequest"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
??afRegister?relay  SYMBOL "?relay", afRegister
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_set_event?relay SYMBOL "?relay", osal_set_event
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??osal_strlen?relay SYMBOL "?relay", osal_strlen
InitKey2            SYMBOL "InitKey2"
??InitKey2?relay    SYMBOL "?relay", InitKey2
Sound_Init          SYMBOL "Sound_Init"
??Sound_Init?relay  SYMBOL "?relay", Sound_Init
Sound_MessageMSGCB  SYMBOL "Sound_MessageMSGCB"
??Sound_MessageMSGCB?relay SYMBOL "?relay", Sound_MessageMSGCB
Sound_ProcessEvent  SYMBOL "Sound_ProcessEvent"
??Sound_ProcessEvent?relay SYMBOL "?relay", Sound_ProcessEvent
Sound_SendTheMessage SYMBOL "Sound_SendTheMessage"
??Sound_SendTheMessage?relay SYMBOL "?relay", Sound_SendTheMessage
halKeyPort1Isr      SYMBOL "halKeyPort1Isr"
`??halKeyPort1Isr??INTVEC 123` SYMBOL "??INTVEC 123", halKeyPort1Isr

        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_strlen
        FUNCTION osal_strlen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_set_event?relay
        FUNCTION ??osal_set_event?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??osal_strlen?relay
        FUNCTION ??osal_strlen?relay,00H

// F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\03Щљвє\Source\Sound.c
//    1 /******************************************************************************
//    2   Filename:       Sound.c
//    3   Revised:        $Date: 2012-03-07 01:04:58 -0800 (Wed, 07 Mar 2012) $
//    4   Revision:       $Revision: 29656 $
//    5 
//    6   Description:    Generic Application (no Profile).
//    7 
//    8 
//    9   Copyright 2004-2012 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License"). You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product. Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 ******************************************************************************/
//   39 
//   40 /*********************************************************************
//   41   This application isn't intended to do anything useful, it is
//   42   intended to be a simple example of an application's structure.
//   43 
//   44   This application sends "Hello World" to another "Generic"
//   45   application every 5 seconds.  The application will also
//   46   receives "Hello World" packets.
//   47 
//   48   The "Hello World" messages are sent/received as MSG type message.
//   49 
//   50   This applications doesn't have a profile, so it handles everything
//   51   directly - itself.
//   52 
//   53   Key control:
//   54     SW1:
//   55     SW2:  initiates end device binding
//   56     SW3:
//   57     SW4:  initiates a match description request
//   58 *********************************************************************/
//   59 
//   60 /*********************************************************************
//   61  * INCLUDES
//   62  */
//   63 #include "OSAL.h"
//   64 #include "AF.h"
//   65 #include "ZDApp.h"
//   66 #include "ZDObject.h"
//   67 #include "ZDProfile.h"
//   68 #include <string.h>
//   69 //#include "Common.h"
//   70 #include "DebugTrace.h"
//   71 #include "Sound.h"
//   72 #include "MT.h"
//   73 
//   74 #if !defined( WIN32 )
//   75   #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,08aH
// unsigned char volatile __sfr P1IFG
P1IFG:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,08cH
// unsigned char volatile __sfr PICTL
PICTL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,08dH
// unsigned char volatile __sfr P1IEN
P1IEN:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,09aH
// unsigned char volatile __sfr IEN2
IEN2:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e8H
// union <unnamed> volatile __sfr _A_IRCON2
_A_IRCON2:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DATA8
        DS 1
//   76 #endif
//   77 
//   78 /* HAL */
//   79 #include "hal_lcd.h"
//   80 #include "hal_led.h"
//   81 #include "hal_key.h"
//   82 #include "hal_uart.h"
//   83 #include "mt_uart.h"
//   84 
//   85 /*********************************************************************
//   86  * MACROS
//   87  */
//   88 
//   89 /*********************************************************************
//   90  * CONSTANTS
//   91  */
//   92 
//   93 /*********************************************************************
//   94  * TYPEDEFS
//   95  */
//   96 
//   97 /*********************************************************************
//   98  * GLOBAL VARIABLES
//   99  */
//  100 // This list should be filled with Application specific Cluster IDs.
//  101 
//  102 /* SW_6 is at P0.1 */
//  103 #define HAL_KEY_SW_7_PORT   P1
//  104 #define HAL_KEY_SW_7_BIT    BV(3)
//  105 #define HAL_KEY_SW_7_SEL    P1SEL
//  106 #define HAL_KEY_SW_7_DIR    P1DIR
//  107 
//  108 /* edge interrupt */
//  109 #define HAL_KEY_SW_7_EDGEBIT  BV(0)
//  110 #define HAL_KEY_SW_7_EDGE     HAL_KEY_RISING_EDGE
//  111 
//  112 
//  113 /* SW_6 interrupts */
//  114 #define HAL_KEY_SW_7_IEN      IEN2  /* CPU interrupt mask register */
//  115 #define HAL_KEY_SW_7_IENBIT   BV(4) /* Mask bit for all of Port_0 */
//  116 #define HAL_KEY_SW_7_ICTL     P1IEN /* Port Interrupt Control register */
//  117 #define HAL_KEY_SW_7_ICTLBIT  BV(3) /* P0IEN - P0.1 enable/disable bit */
//  118 #define HAL_KEY_SW_7_PXIFG    P1IFG /* Interrupt flag at source */
//  119 
//  120 #include "OSAL.h"
//  121 #include "AF.h"
//  122 #include "ZDApp.h"
//  123 #include "ZDObject.h"
//  124 #include "ZDProfile.h"
//  125 #include <string.h>
//  126 //#include "Common.h"
//  127 #include "DebugTrace.h"
//  128 #include "Sound.h"
//  129 #include "MT.h"
//  130 
//  131 #if !defined( WIN32 )
//  132   #include "OnBoard.h"
//  133 #endif
//  134 
//  135 /* HAL */
//  136 #include "hal_lcd.h"
//  137 #include "hal_led.h"
//  138 #include "hal_key.h"
//  139 #include "hal_uart.h"
//  140 #include "mt_uart.h"
//  141 
//  142 
//  143 #define SEND_DATA_EVENT 0x01

        RSEG XDATA_I:XDATA:NOROOT(0)
//  144 unsigned char flag='0';
flag:
        DATA8
        DS 1
        REQUIRE `?<Initializer for flag>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//  145 const cId_t Sound_ClusterList[Sound_MAX_CLUSTERS] =
Sound_ClusterList:
        DW 6
//  146 {
//  147   Sound_CLUSTERID
//  148 };
//  149 
//  150 
//  151 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  152 const SimpleDescriptionFormat_t Sound_SimpleDesc =
Sound_SimpleDesc:
        DB 10
        DATA16
        DW 3844
        DW 1
        DATA8
        DB 0
        DB 0
        DATA16
        DW 0H
        DATA8
        DB 1
        DATA16
        DW Sound_ClusterList
//  153 {
//  154   Sound_ENDPOINT,              //  int Endpoint;
//  155   Sound_PROFID,                //  uint16 AppProfId[2];
//  156   Sound_DEVICEID,              //  uint16 AppDeviceId[2];
//  157   Sound_DEVICE_VERSION,        //  int   AppDevVer:4;
//  158   Sound_FLAGS,                 //  int   AppFlags:4;
//  159   
//  160   
//  161   0,          //  byte  AppNumInClusters;
//  162   (cId_t *)NULL,  //  byte *pAppInClusterList;
//  163   Sound_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//  164   (cId_t *)Sound_ClusterList   //  byte *pAppInClusterList;
//  165 };
//  166 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  167 unsigned char TempDATA;
TempDATA:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  168 endPointDesc_t Sound_epDesc;
Sound_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  169 byte Sound_TaskID;
Sound_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  170 byte Sound_TransID;
Sound_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  171 devStates_t Sound_NwkState;
Sound_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  172 void Sound_MessageMSGCB(afIncomingMSGPacket_t *MSGpkt);
//  173 void Sound_SendTheMessage(void);
//  174 
//  175 
//  176 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  177 void Sound_Init( byte task_id )
Sound_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function Sound_Init
        CODE
//  178 {
        FUNCALL Sound_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  179   halUARTCfg_t uartConfig;//ДЎПк
//  180     
//  181   Sound_TaskID = task_id;
        MOV     DPTR,#Sound_TaskID
        MOVX    @DPTR,A
//  182   Sound_NwkState=DEV_INIT;
        MOV     DPTR,#Sound_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  183   Sound_TransID = 0;
        MOV     DPTR,#Sound_TransID
        CLR     A
        MOVX    @DPTR,A
//  184 
//  185   
//  186   Sound_epDesc.endPoint = Sound_ENDPOINT;
        MOV     DPTR,#Sound_epDesc
        MOV     A,#0xa
        MOVX    @DPTR,A
//  187   Sound_epDesc.task_id = &Sound_TaskID;
        INC     DPTR
        MOV     A,#Sound_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(Sound_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  188   Sound_epDesc.simpleDesc
//  189             = (SimpleDescriptionFormat_t *)&Sound_SimpleDesc;
        INC     DPTR
        MOV     A,#Sound_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(Sound_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//  190   
//  191   Sound_epDesc.latencyReq = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  192   afRegister( &Sound_epDesc ); 
        ; Setup parameters for call to function afRegister
        MOV     R2,#Sound_epDesc & 0xff
        MOV     R3,#(Sound_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  193 
//  194 }
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
//  195 //KET1 ЭтВПжаЖЯЗНЪН

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  196 void InitKey2(void)
InitKey2:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function InitKey2
        CODE
//  197 {
        ; Saved register size: 0
        ; Auto size: 0
//  198   P1IEN |= 0X08;
        ORL     0x8d,#0x8
//  199   PICTL |= 0X2; // ЯТНЕбиДЅЗЂ   
        ORL     0x8c,#0x2
//  200   IEN2 |= 0X10;   // дЪаэP1ПкжаЖЯ; 
        ORL     0x9a,#0x10
//  201   P1IFG = 0x08;   // ГѕЪМЛЏжаЖЯБъжОЮЛ
        MOV     0x8a,#0x8
//  202   P1DIR |= 0x13;
        ORL     0xfe,#0x13
//  203   EA = 1; 
        SETB    0xa8.7
//  204 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock1
        REQUIRE P1IEN
        REQUIRE PICTL
        REQUIRE IEN2
        REQUIRE P1IFG
        REQUIRE P1DIR
        REQUIRE _A_IEN0

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  205 UINT16 Sound_ProcessEvent( byte task_id, UINT16 events )
Sound_ProcessEvent:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function Sound_ProcessEvent
        CODE
//  206 {
        FUNCALL Sound_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Sound_ProcessEvent, Sound_MessageMSGCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Sound_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Sound_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Sound_ProcessEvent, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Sound_ProcessEvent, InitKey2
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Sound_ProcessEvent, Sound_SendTheMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Sound_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  207   afIncomingMSGPacket_t *MSGpkt;
//  208 
//  209   if ( events & SYS_EVENT_MSG )
        MOV     A,R3
        ANL     A,#0x80
        JZ      ??Sound_ProcessEvent_0
//  210   {
//  211     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( Sound_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??Sound_ProcessEvent_1
//  212     while ( MSGpkt )
//  213     {
//  214       switch ( MSGpkt->hdr.event )
//  215       {
//  216        
//  217           case ZDO_STATE_CHANGE:
//  218             Sound_NwkState = (devStates_t)(MSGpkt->hdr.status);
//  219             if(Sound_NwkState==DEV_END_DEVICE)
//  220             {
//  221               P1_0=~P1_0;
//  222               osal_set_event(Sound_TaskID,SEND_DATA_EVENT);
//  223             }
//  224             break;
//  225             
//  226            case AF_INCOMING_MSG_CMD:
//  227              Sound_MessageMSGCB( MSGpkt );//аТМгЕФаХЯЂНгЪеКЏЪ§
??Sound_ProcessEvent_2:
        ; Setup parameters for call to function Sound_MessageMSGCB
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??Sound_MessageMSGCB?relay
//  228              break;
//  229              
//  230           default:
//  231             break;
//  232       }
//  233       osal_msg_deallocate( (uint8 *)MSGpkt );
??Sound_ProcessEvent_3:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_msg_deallocate?relay
//  234       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( Sound_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??Sound_ProcessEvent_1:
        MOV     DPTR,#Sound_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
        MOV     A,R6
        ORL     A,R7
        JZ      ??Sound_ProcessEvent_4
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??Sound_ProcessEvent_2
        ADD     A,#0x49
        JNZ     ??Sound_ProcessEvent_3
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#Sound_NwkState
        MOVX    @DPTR,A
        XRL     A,#0x6
        JNZ     ??Sound_ProcessEvent_3
        SETB    B.0
        MOV     C,0x90.0
        JNB     B.0,??Sound_ProcessEvent_5
        CPL     C
??Sound_ProcessEvent_5:
        MOV     0x90.0,C
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#Sound_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay
        SJMP    ??Sound_ProcessEvent_3
//  235     }
//  236     // return unprocessed events
//  237     return (events ^ SYS_EVENT_MSG);
??Sound_ProcessEvent_4:
        MOV     R2,?V0 + 0
        MOV     A,?V0 + 1
        XRL     A,#0x80
        MOV     R3,A
        SJMP    ??Sound_ProcessEvent_6
//  238   }
//  239   if(events&SEND_DATA_EVENT)
??Sound_ProcessEvent_0:
        MOV     A,R2
        MOV     C,0xE0 /* A   */.0
        JNC     ??Sound_ProcessEvent_7
//  240   {
//  241     flag='0';
        MOV     DPTR,#flag
        MOV     A,#0x30
        MOVX    @DPTR,A
//  242     InitKey2();
        ; Setup parameters for call to function InitKey2
        LCALL   ??InitKey2?relay
//  243     Sound_SendTheMessage();
        ; Setup parameters for call to function Sound_SendTheMessage
        LCALL   ??Sound_SendTheMessage?relay
//  244     osal_start_timerEx(Sound_TaskID,SEND_DATA_EVENT,3000);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x48
        MOV     R5,#0xb
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#Sound_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  245     return(events^SEND_DATA_EVENT);
        MOV     A,?V0 + 0
        XRL     A,#0x1
        MOV     R2,A
        MOV     R3,?V0 + 1
        SJMP    ??Sound_ProcessEvent_6
//  246   }
//  247   return 0;
??Sound_ProcessEvent_7:
        MOV     R2,#0x0
        MOV     R3,#0x0
??Sound_ProcessEvent_6:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
        REQUIRE _A_P1
//  248 }
//  249 
//  250 //НгЪеЕНЯћЯЂНјааДІРэЕФКЏЪ§

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  251 void Sound_MessageMSGCB( afIncomingMSGPacket_t *pkt )
Sound_MessageMSGCB:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function Sound_MessageMSGCB
        CODE
//  252 {
        FUNCALL Sound_MessageMSGCB, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Sound_MessageMSGCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Sound_MessageMSGCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Sound_MessageMSGCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Sound_MessageMSGCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Sound_MessageMSGCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Sound_MessageMSGCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Sound_MessageMSGCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Sound_MessageMSGCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
//  253   unsigned char buffer[4]; 
//  254   switch ( pkt->clusterId )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x3
        JNZ     ??Sound_MessageMSGCB_0
        INC     DPTR
        MOVX    A,@DPTR
??Sound_MessageMSGCB_0:
        JNZ     ??Sound_MessageMSGCB_1
//  255   {
//  256   case Double_CLUSTERID:
//  257     osal_memcpy(buffer, pkt->cmd.Data, 4);
        ; Setup parameters for call to function osal_memcpy
        MOV     A,R2
        ADD     A,#0x22
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
//  258     if(buffer[0] == '3')       
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0x33
        JNZ     ??Sound_MessageMSGCB_2
//  259     {
//  260       HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );;
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
//  261       HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );;
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x2
        LCALL   ??HalLedSet?relay
//  262       HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );;
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x4
        LCALL   ??HalLedSet?relay
//  263       HalLedSet ( HAL_LED_4, HAL_LED_MODE_ON );;
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
//  264     }
//  265     if(buffer[0] == '4')       
??Sound_MessageMSGCB_2:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0x34
        JNZ     ??Sound_MessageMSGCB_1
//  266     {
//  267       HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );;
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
//  268       HalLedSet ( HAL_LED_2, HAL_LED_MODE_OFF );;
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x2
        LCALL   ??HalLedSet?relay
//  269       HalLedSet ( HAL_LED_3, HAL_LED_MODE_OFF );;
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x4
        LCALL   ??HalLedSet?relay
//  270       HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );;
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
//  271     }
//  272     break;
//  273   }
//  274 }
??Sound_MessageMSGCB_1:
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock3
//  275 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  276 void Sound_SendTheMessage(void)
Sound_SendTheMessage:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function Sound_SendTheMessage
        CODE
//  277 { 
        FUNCALL Sound_SendTheMessage, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Sound_SendTheMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 22
        MOV     A,#-0x16
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 32)
//  278   unsigned char theMessageData[10]="EndDevice";
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant "EndDevice">` >> 8) & 0xff
        MOV     DPL,#`?<Constant "EndDevice">` & 0xff
        MOV     A,#0xa
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  279 
//  280   afAddrType_t my_DstAddr;
//  281 
//  282   my_DstAddr.addrMode=(afAddrMode_t)Addr16Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  283   my_DstAddr.endPoint=Sound_ENDPOINT;
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xa
        MOVX    @DPTR,A
//  284   my_DstAddr.addr.shortAddr=0x0000; 
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  285 
//  286 
//  287   theMessageData[0]=flag;
        MOV     DPTR,#flag
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  288 
//  289   AF_DataRequest(&my_DstAddr
//  290   ,&Sound_epDesc
//  291   ,Sound_CLUSTERID
//  292   ,osal_strlen("EndDevice")+1
//  293   ,theMessageData
//  294   ,&Sound_TransID
//  295   ,AF_DISCV_ROUTE
//  296   ,AF_DEFAULT_RADIUS);
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     ?V0 + 0,#Sound_TransID & 0xff
        MOV     ?V0 + 1,#(Sound_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 35)
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 37)
        ; Setup parameters for call to function osal_strlen
        MOV     R2,#`?<Constant "EndDevice">_1` & 0xff
        MOV     R3,#(`?<Constant "EndDevice">_1` >> 8) & 0xff
        LCALL   ??osal_strlen?relay
        MOV     A,R2
        ADD     A,#0x1
        MOV     ?V0 + 0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 39)
        MOV     ?V0 + 0,#0x6
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 41)
        MOV     R1,#0x20
        MOV     R4,#Sound_epDesc & 0xff
        MOV     R5,#(Sound_epDesc >> 8) & 0xff
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 32)
//  297 }
        MOV     A,#0x16
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock4
//  298 
//  299 
//  300 
//  301 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  302 HAL_ISR_FUNCTION( halKeyPort1Isr, P1INT_VECTOR )
halKeyPort1Isr:
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function halKeyPort1Isr
        CODE
//  303 {
        FUNCALL halKeyPort1Isr, Sound_SendTheMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    A
        CFI A Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        MOV     A,#-0xe
        LCALL   ?INTERRUPT_ENTER_XSP
        CFI B load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
//  304   
//  305   if (HAL_KEY_SW_7_PXIFG & HAL_KEY_SW_7_BIT)
        MOV     A,0x8a
        MOV     C,0xE0 /* A   */.3
        JNC     ??halKeyPort1Isr_0
//  306   {
//  307     flag='1';
        MOV     DPTR,#flag
        MOV     A,#0x31
        MOVX    @DPTR,A
//  308     Sound_SendTheMessage( );
        ; Setup parameters for call to function Sound_SendTheMessage
        LCALL   ??Sound_SendTheMessage?relay
//  309     flag='0';
        MOV     DPTR,#flag
        MOV     A,#0x30
        MOVX    @DPTR,A
//  310     P1IFG = 0;             //ЧхжаЖЯБъжО 
        MOV     0x8a,#0x0
//  311     P1IF = 0;             //ЧхжаЖЯБъжО 
        CLR     0xe8.3
//  312   }
//  313 }
??halKeyPort1Isr_0:
        MOV     R7,#0x1
        LJMP    ?INTERRUPT_LEAVE_XSP
        CFI EndBlock cfiBlock5
        REQUIRE P1IFG
        REQUIRE _A_IRCON2

        COMMON INTVEC:CODE:ROOT(0)
        ORG 123
`??halKeyPort1Isr??INTVEC 123`:
        LJMP       (halKeyPort1Isr)

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for flag>`:
        DATA8
        DB 48

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Sound_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Sound_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??InitKey2?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    InitKey2

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Sound_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Sound_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Sound_MessageMSGCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Sound_MessageMSGCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Sound_SendTheMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Sound_SendTheMessage

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "EndDevice">`:
        DB "EndDevice"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "EndDevice">_1`:
        DB "EndDevice"

        END
// 
// 567 bytes in segment BANKED_CODE
//  30 bytes in segment BANK_RELAYS
//   3 bytes in segment INTVEC
//  38 bytes in segment NEAR_CODE
//   8 bytes in segment SFR_AN
//   1 byte  in segment XDATA_I
//   1 byte  in segment XDATA_ID
//  34 bytes in segment XDATA_ROM_C
//  10 bytes in segment XDATA_Z
// 
// 636 bytes of CODE  memory (+ 3 bytes shared)
//  34 bytes of CONST memory
//   0 bytes of DATA  memory (+ 8 bytes shared)
//  11 bytes of XDATA memory
//
//Errors: none
//Warnings: none

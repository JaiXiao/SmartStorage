###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         10/Jul/2017  15:26:49 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. #
#                          5.1a\Projects\zstack\Samples\03Щљвє\Source\Sound.c #
#    Command line       =  -f F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\03Щљвє\CC2530DB\.. #
#                          \..\..\Tools\CC2530DB\f8wEndev.cfg (-DCPU32MHZ     #
#                          -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3         #
#                          -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f          #
#                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. #
#                          5.1a\Projects\zstack\Samples\03Щљвє\CC2530DB\..\.. #
#                          \..\Tools\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO      #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00004000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 F:\ДњТы\ДњТы\ZStack-CC2530- #
#                          2.5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\Sample #
#                          s\03Щљвє\Source\Sound.c -D NWK_AUTO_POLL -D        #
#                          ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC  #
#                          -D LCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC        #
#                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. #
#                          5.1a\Projects\zstack\Samples\03Щљвє\CC2530DB\EndDe #
#                          viceEB\List\ -lA F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a #
#                          \ZStack-CC2530-2.5.1a\Projects\zstack\Samples\03Щљ #
#                          вє\CC2530DB\EndDeviceEB\List\ --diag_suppress      #
#                          Pe001,Pa010 -o F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\Z #
#                          Stack-CC2530-2.5.1a\Projects\zstack\Samples\03Щљвє #
#                          \CC2530DB\EndDeviceEB\Obj\ -e --no_code_motion     #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\03Щљвє\CC2530DB\   #
#                          -I F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\03Щљвє\CC2530DB\.. #
#                          \Source\ -I F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZSta #
#                          ck-CC2530-2.5.1a\Projects\zstack\Samples\03Щљвє\CC #
#                          2530DB\..\..\..\ZMain\TI2530DB\ -I                 #
#                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. #
#                          5.1a\Projects\zstack\Samples\03Щљвє\CC2530DB\..\.. #
#                          \..\..\..\Components\hal\include\ -I               #
#                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. #
#                          5.1a\Projects\zstack\Samples\03Щљвє\CC2530DB\..\.. #
#                          \..\..\..\Components\hal\target\CC2530EB\ -I       #
#                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. #
#                          5.1a\Projects\zstack\Samples\03Щљвє\CC2530DB\..\.. #
#                          \..\..\..\Components\mac\include\ -I               #
#                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. #
#                          5.1a\Projects\zstack\Samples\03Щљвє\CC2530DB\..\.. #
#                          \..\..\..\Components\mac\high_level\ -I            #
#                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. #
#                          5.1a\Projects\zstack\Samples\03Щљвє\CC2530DB\..\.. #
#                          \..\..\..\Components\mac\low_level\srf04\ -I       #
#                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. #
#                          5.1a\Projects\zstack\Samples\03Щљвє\CC2530DB\..\.. #
#                          \..\..\..\Components\mac\low_level\srf04\single_ch #
#                          ip\ -I F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC #
#                          2530-2.5.1a\Projects\zstack\Samples\03Щљвє\CC2530D #
#                          B\..\..\..\..\..\Components\mt\ -I                 #
#                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. #
#                          5.1a\Projects\zstack\Samples\03Щљвє\CC2530DB\..\.. #
#                          \..\..\..\Components\osal\include\ -I              #
#                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. #
#                          5.1a\Projects\zstack\Samples\03Щљвє\CC2530DB\..\.. #
#                          \..\..\..\Components\services\saddr\ -I            #
#                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. #
#                          5.1a\Projects\zstack\Samples\03Щљвє\CC2530DB\..\.. #
#                          \..\..\..\Components\services\sdata\ -I            #
#                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. #
#                          5.1a\Projects\zstack\Samples\03Щљвє\CC2530DB\..\.. #
#                          \..\..\..\Components\stack\af\ -I                  #
#                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. #
#                          5.1a\Projects\zstack\Samples\03Щљвє\CC2530DB\..\.. #
#                          \..\..\..\Components\stack\nwk\ -I                 #
#                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. #
#                          5.1a\Projects\zstack\Samples\03Щљвє\CC2530DB\..\.. #
#                          \..\..\..\Components\stack\sapi\ -I                #
#                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. #
#                          5.1a\Projects\zstack\Samples\03Щљвє\CC2530DB\..\.. #
#                          \..\..\..\Components\stack\sec\ -I                 #
#                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. #
#                          5.1a\Projects\zstack\Samples\03Щљвє\CC2530DB\..\.. #
#                          \..\..\..\Components\stack\sys\ -I                 #
#                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. #
#                          5.1a\Projects\zstack\Samples\03Щљвє\CC2530DB\..\.. #
#                          \..\..\..\Components\stack\zdo\ -I                 #
#                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. #
#                          5.1a\Projects\zstack\Samples\03Щљвє\CC2530DB\..\.. #
#                          \..\..\..\Components\zmac\ -I                      #
#                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. #
#                          5.1a\Projects\zstack\Samples\03Щљвє\CC2530DB\..\.. #
#                          \..\..\..\Components\zmac\f8w\ -Ohz                #
#    List file          =  F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. #
#                          5.1a\Projects\zstack\Samples\03Щљвє\CC2530DB\EndDe #
#                          viceEB\List\Sound.lst                              #
#    Object file        =  F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. #
#                          5.1a\Projects\zstack\Samples\03Щљвє\CC2530DB\EndDe #
#                          viceEB\Obj\Sound.r51                               #
#                                                                             #
#                                                                             #
###############################################################################

F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\03Щљвє\Source\Sound.c
      1          /******************************************************************************
      2            Filename:       Sound.c
      3            Revised:        $Date: 2012-03-07 01:04:58 -0800 (Wed, 07 Mar 2012) $
      4            Revision:       $Revision: 29656 $
      5          
      6            Description:    Generic Application (no Profile).
      7          
      8          
      9            Copyright 2004-2012 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          ******************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends "Hello World" to another "Generic"
     45            application every 5 seconds.  The application will also
     46            receives "Hello World" packets.
     47          
     48            The "Hello World" messages are sent/received as MSG type message.
     49          
     50            This applications doesn't have a profile, so it handles everything
     51            directly - itself.
     52          
     53            Key control:
     54              SW1:
     55              SW2:  initiates end device binding
     56              SW3:
     57              SW4:  initiates a match description request
     58          *********************************************************************/
     59          
     60          /*********************************************************************
     61           * INCLUDES
     62           */
     63          #include "OSAL.h"
     64          #include "AF.h"
     65          #include "ZDApp.h"
     66          #include "ZDObject.h"
     67          #include "ZDProfile.h"
     68          #include <string.h>
     69          //#include "Common.h"
     70          #include "DebugTrace.h"
     71          #include "Sound.h"
     72          #include "MT.h"
     73          
     74          #if !defined( WIN32 )
     75            #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x8a
   \   unsigned char volatile __sfr P1IFG
   \                     P1IFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8c
   \   unsigned char volatile __sfr PICTL
   \                     PICTL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8d
   \   unsigned char volatile __sfr P1IEN
   \                     P1IEN:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9a
   \   unsigned char volatile __sfr IEN2
   \                     IEN2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe8
   \   union <unnamed> volatile __sfr _A_IRCON2
   \                     _A_IRCON2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     76          #endif
     77          
     78          /* HAL */
     79          #include "hal_lcd.h"
     80          #include "hal_led.h"
     81          #include "hal_key.h"
     82          #include "hal_uart.h"
     83          #include "mt_uart.h"
     84          
     85          /*********************************************************************
     86           * MACROS
     87           */
     88          
     89          /*********************************************************************
     90           * CONSTANTS
     91           */
     92          
     93          /*********************************************************************
     94           * TYPEDEFS
     95           */
     96          
     97          /*********************************************************************
     98           * GLOBAL VARIABLES
     99           */
    100          // This list should be filled with Application specific Cluster IDs.
    101          
    102          /* SW_6 is at P0.1 */
    103          #define HAL_KEY_SW_7_PORT   P1
    104          #define HAL_KEY_SW_7_BIT    BV(3)
    105          #define HAL_KEY_SW_7_SEL    P1SEL
    106          #define HAL_KEY_SW_7_DIR    P1DIR
    107          
    108          /* edge interrupt */
    109          #define HAL_KEY_SW_7_EDGEBIT  BV(0)
    110          #define HAL_KEY_SW_7_EDGE     HAL_KEY_RISING_EDGE
    111          
    112          
    113          /* SW_6 interrupts */
    114          #define HAL_KEY_SW_7_IEN      IEN2  /* CPU interrupt mask register */
    115          #define HAL_KEY_SW_7_IENBIT   BV(4) /* Mask bit for all of Port_0 */
    116          #define HAL_KEY_SW_7_ICTL     P1IEN /* Port Interrupt Control register */
    117          #define HAL_KEY_SW_7_ICTLBIT  BV(3) /* P0IEN - P0.1 enable/disable bit */
    118          #define HAL_KEY_SW_7_PXIFG    P1IFG /* Interrupt flag at source */
    119          
    120          #include "OSAL.h"
    121          #include "AF.h"
    122          #include "ZDApp.h"
    123          #include "ZDObject.h"
    124          #include "ZDProfile.h"
    125          #include <string.h>
    126          //#include "Common.h"
    127          #include "DebugTrace.h"
    128          #include "Sound.h"
    129          #include "MT.h"
    130          
    131          #if !defined( WIN32 )
    132            #include "OnBoard.h"
    133          #endif
    134          
    135          /* HAL */
    136          #include "hal_lcd.h"
    137          #include "hal_led.h"
    138          #include "hal_key.h"
    139          #include "hal_uart.h"
    140          #include "mt_uart.h"
    141          
    142          
    143          #define SEND_DATA_EVENT 0x01

   \                                 In  segment XDATA_I, align 1, keep-with-next
    144          unsigned char flag='0';
   \                     flag:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for flag>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_ROM_C, align 1
    145          const cId_t Sound_ClusterList[Sound_MAX_CLUSTERS] =
   \                     Sound_ClusterList:
   \   000000   0600         DW 6
    146          {
    147            Sound_CLUSTERID
    148          };
    149          
    150          
    151          

   \                                 In  segment XDATA_ROM_C, align 1
    152          const SimpleDescriptionFormat_t Sound_SimpleDesc =
   \                     Sound_SimpleDesc:
   \   000000   0A           DB 10
   \   000001   040F         DW 3844
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   0000         DW 0H
   \   000009   01           DB 1
   \   00000A   ....         DW Sound_ClusterList
    153          {
    154            Sound_ENDPOINT,              //  int Endpoint;
    155            Sound_PROFID,                //  uint16 AppProfId[2];
    156            Sound_DEVICEID,              //  uint16 AppDeviceId[2];
    157            Sound_DEVICE_VERSION,        //  int   AppDevVer:4;
    158            Sound_FLAGS,                 //  int   AppFlags:4;
    159            
    160            
    161            0,          //  byte  AppNumInClusters;
    162            (cId_t *)NULL,  //  byte *pAppInClusterList;
    163            Sound_MAX_CLUSTERS,          //  byte  AppNumInClusters;
    164            (cId_t *)Sound_ClusterList   //  byte *pAppInClusterList;
    165          };
    166          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    167          unsigned char TempDATA;
   \                     TempDATA:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    168          endPointDesc_t Sound_epDesc;
   \                     Sound_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    169          byte Sound_TaskID;
   \                     Sound_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    170          byte Sound_TransID;
   \                     Sound_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    171          devStates_t Sound_NwkState;
   \                     Sound_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    172          void Sound_MessageMSGCB(afIncomingMSGPacket_t *MSGpkt);
    173          void Sound_SendTheMessage(void);
    174          
    175          
    176          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    177          void Sound_Init( byte task_id )
   \                     Sound_Init:
    178          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    179            halUARTCfg_t uartConfig;//ДЎПк
    180              
    181            Sound_TaskID = task_id;
   \   000006   90....       MOV     DPTR,#Sound_TaskID
   \   000009   F0           MOVX    @DPTR,A
    182            Sound_NwkState=DEV_INIT;
   \   00000A   90....       MOV     DPTR,#Sound_NwkState
   \   00000D   7401         MOV     A,#0x1
   \   00000F   F0           MOVX    @DPTR,A
    183            Sound_TransID = 0;
   \   000010   90....       MOV     DPTR,#Sound_TransID
   \   000013   E4           CLR     A
   \   000014   F0           MOVX    @DPTR,A
    184          
    185            
    186            Sound_epDesc.endPoint = Sound_ENDPOINT;
   \   000015   90....       MOV     DPTR,#Sound_epDesc
   \   000018   740A         MOV     A,#0xa
   \   00001A   F0           MOVX    @DPTR,A
    187            Sound_epDesc.task_id = &Sound_TaskID;
   \   00001B   A3           INC     DPTR
   \   00001C   74..         MOV     A,#Sound_TaskID & 0xff
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
   \   000020   74..         MOV     A,#(Sound_TaskID >> 8) & 0xff
   \   000022   F0           MOVX    @DPTR,A
    188            Sound_epDesc.simpleDesc
    189                      = (SimpleDescriptionFormat_t *)&Sound_SimpleDesc;
   \   000023   A3           INC     DPTR
   \   000024   74..         MOV     A,#Sound_SimpleDesc & 0xff
   \   000026   F0           MOVX    @DPTR,A
   \   000027   A3           INC     DPTR
   \   000028   74..         MOV     A,#(Sound_SimpleDesc >> 8) & 0xff
   \   00002A   F0           MOVX    @DPTR,A
    190            
    191            Sound_epDesc.latencyReq = noLatencyReqs;
   \   00002B   A3           INC     DPTR
   \   00002C   E4           CLR     A
   \   00002D   F0           MOVX    @DPTR,A
    192            afRegister( &Sound_epDesc ); 
   \   00002E                ; Setup parameters for call to function afRegister
   \   00002E   7A..         MOV     R2,#Sound_epDesc & 0xff
   \   000030   7B..         MOV     R3,#(Sound_epDesc >> 8) & 0xff
   \   000032   12....       LCALL   ??afRegister?relay
    193          
    194          }
   \   000035   7F01         MOV     R7,#0x1
   \   000037   02....       LJMP    ?BANKED_LEAVE_XDATA
    195          //KET1 ЭтВПжаЖЯЗНЪН

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    196          void InitKey2(void)
   \                     InitKey2:
    197          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    198            P1IEN |= 0X08;
   \   000000   438D08       ORL     0x8d,#0x8
    199            PICTL |= 0X2; // ЯТНЕбиДЅЗЂ   
   \   000003   438C02       ORL     0x8c,#0x2
    200            IEN2 |= 0X10;   // дЪаэP1ПкжаЖЯ; 
   \   000006   439A10       ORL     0x9a,#0x10
    201            P1IFG = 0x08;   // ГѕЪМЛЏжаЖЯБъжОЮЛ
   \   000009   758A08       MOV     0x8a,#0x8
    202            P1DIR |= 0x13;
   \   00000C   43FE13       ORL     0xfe,#0x13
    203            EA = 1; 
   \   00000F   D2AF         SETB    0xa8.7
    204          }
   \   000011   02....       LJMP    ?BRET
   \   000014                REQUIRE P1IEN
   \   000014                REQUIRE PICTL
   \   000014                REQUIRE IEN2
   \   000014                REQUIRE P1IFG
   \   000014                REQUIRE P1DIR
   \   000014                REQUIRE _A_IEN0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    205          UINT16 Sound_ProcessEvent( byte task_id, UINT16 events )
   \                     Sound_ProcessEvent:
    206          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
    207            afIncomingMSGPacket_t *MSGpkt;
    208          
    209            if ( events & SYS_EVENT_MSG )
   \   000009   EB           MOV     A,R3
   \   00000A   5480         ANL     A,#0x80
   \   00000C   605C         JZ      ??Sound_ProcessEvent_0
    210            {
    211              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( Sound_TaskID );
   \   00000E                ; Setup parameters for call to function osal_msg_receive
   \   00000E   800E         SJMP    ??Sound_ProcessEvent_1
    212              while ( MSGpkt )
    213              {
    214                switch ( MSGpkt->hdr.event )
    215                {
    216                 
    217                    case ZDO_STATE_CHANGE:
    218                      Sound_NwkState = (devStates_t)(MSGpkt->hdr.status);
    219                      if(Sound_NwkState==DEV_END_DEVICE)
    220                      {
    221                        P1_0=~P1_0;
    222                        osal_set_event(Sound_TaskID,SEND_DATA_EVENT);
    223                      }
    224                      break;
    225                      
    226                     case AF_INCOMING_MSG_CMD:
    227                       Sound_MessageMSGCB( MSGpkt );//аТМгЕФаХЯЂНгЪеКЏЪ§
   \                     ??Sound_ProcessEvent_2:
   \   000010                ; Setup parameters for call to function Sound_MessageMSGCB
   \   000010   EE           MOV     A,R6
   \   000011   FA           MOV     R2,A
   \   000012   EF           MOV     A,R7
   \   000013   FB           MOV     R3,A
   \   000014   12....       LCALL   ??Sound_MessageMSGCB?relay
    228                       break;
    229                       
    230                    default:
    231                      break;
    232                }
    233                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??Sound_ProcessEvent_3:
   \   000017                ; Setup parameters for call to function osal_msg_deallocate
   \   000017   EE           MOV     A,R6
   \   000018   FA           MOV     R2,A
   \   000019   EF           MOV     A,R7
   \   00001A   FB           MOV     R3,A
   \   00001B   12....       LCALL   ??osal_msg_deallocate?relay
    234                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( Sound_TaskID );
   \   00001E                ; Setup parameters for call to function osal_msg_receive
   \                     ??Sound_ProcessEvent_1:
   \   00001E   90....       MOV     DPTR,#Sound_TaskID
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F9           MOV     R1,A
   \   000023   12....       LCALL   ??osal_msg_receive?relay
   \   000026   8A..         MOV     ?V0 + 2,R2
   \   000028   8B..         MOV     ?V0 + 3,R3
   \   00002A   AE..         MOV     R6,?V0 + 2
   \   00002C   AF..         MOV     R7,?V0 + 3
   \   00002E   EE           MOV     A,R6
   \   00002F   4F           ORL     A,R7
   \   000030   602F         JZ      ??Sound_ProcessEvent_4
   \   000032   8E82         MOV     DPL,R6
   \   000034   8F83         MOV     DPH,R7
   \   000036   E0           MOVX    A,@DPTR
   \   000037   24E6         ADD     A,#-0x1a
   \   000039   60D5         JZ      ??Sound_ProcessEvent_2
   \   00003B   2449         ADD     A,#0x49
   \   00003D   70D8         JNZ     ??Sound_ProcessEvent_3
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   90....       MOV     DPTR,#Sound_NwkState
   \   000044   F0           MOVX    @DPTR,A
   \   000045   6406         XRL     A,#0x6
   \   000047   70CE         JNZ     ??Sound_ProcessEvent_3
   \   000049   D2F0         SETB    B.0
   \   00004B   A290         MOV     C,0x90.0
   \   00004D   30F001       JNB     B.0,??Sound_ProcessEvent_5
   \   000050   B3           CPL     C
   \                     ??Sound_ProcessEvent_5:
   \   000051   9290         MOV     0x90.0,C
   \   000053                ; Setup parameters for call to function osal_set_event
   \   000053   7A01         MOV     R2,#0x1
   \   000055   7B00         MOV     R3,#0x0
   \   000057   90....       MOV     DPTR,#Sound_TaskID
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   F9           MOV     R1,A
   \   00005C   12....       LCALL   ??osal_set_event?relay
   \   00005F   80B6         SJMP    ??Sound_ProcessEvent_3
    235              }
    236              // return unprocessed events
    237              return (events ^ SYS_EVENT_MSG);
   \                     ??Sound_ProcessEvent_4:
   \   000061   AA..         MOV     R2,?V0 + 0
   \   000063   E5..         MOV     A,?V0 + 1
   \   000065   6480         XRL     A,#0x80
   \   000067   FB           MOV     R3,A
   \   000068   802E         SJMP    ??Sound_ProcessEvent_6
    238            }
    239            if(events&SEND_DATA_EVENT)
   \                     ??Sound_ProcessEvent_0:
   \   00006A   EA           MOV     A,R2
   \   00006B   A2E0         MOV     C,0xE0 /* A   */.0
   \   00006D   5025         JNC     ??Sound_ProcessEvent_7
    240            {
    241              flag='0';
   \   00006F   90....       MOV     DPTR,#flag
   \   000072   7430         MOV     A,#0x30
   \   000074   F0           MOVX    @DPTR,A
    242              InitKey2();
   \   000075                ; Setup parameters for call to function InitKey2
   \   000075   12....       LCALL   ??InitKey2?relay
    243              Sound_SendTheMessage();
   \   000078                ; Setup parameters for call to function Sound_SendTheMessage
   \   000078   12....       LCALL   ??Sound_SendTheMessage?relay
    244              osal_start_timerEx(Sound_TaskID,SEND_DATA_EVENT,3000);
   \   00007B                ; Setup parameters for call to function osal_start_timerEx
   \   00007B   7CB8         MOV     R4,#-0x48
   \   00007D   7D0B         MOV     R5,#0xb
   \   00007F   7A01         MOV     R2,#0x1
   \   000081   7B00         MOV     R3,#0x0
   \   000083   90....       MOV     DPTR,#Sound_TaskID
   \   000086   E0           MOVX    A,@DPTR
   \   000087   F9           MOV     R1,A
   \   000088   12....       LCALL   ??osal_start_timerEx?relay
    245              return(events^SEND_DATA_EVENT);
   \   00008B   E5..         MOV     A,?V0 + 0
   \   00008D   6401         XRL     A,#0x1
   \   00008F   FA           MOV     R2,A
   \   000090   AB..         MOV     R3,?V0 + 1
   \   000092   8004         SJMP    ??Sound_ProcessEvent_6
    246            }
    247            return 0;
   \                     ??Sound_ProcessEvent_7:
   \   000094   7A00         MOV     R2,#0x0
   \   000096   7B00         MOV     R3,#0x0
   \                     ??Sound_ProcessEvent_6:
   \   000098   7F04         MOV     R7,#0x4
   \   00009A   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00009D                REQUIRE _A_P1
    248          }
    249          
    250          //НгЪеЕНЯћЯЂНјааДІРэЕФКЏЪ§

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    251          void Sound_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     Sound_MessageMSGCB:
    252          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    253            unsigned char buffer[4]; 
    254            switch ( pkt->clusterId )
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   6403         XRL     A,#0x3
   \   000015   7002         JNZ     ??Sound_MessageMSGCB_0
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \                     ??Sound_MessageMSGCB_0:
   \   000019   707C         JNZ     ??Sound_MessageMSGCB_1
    255            {
    256            case Double_CLUSTERID:
    257              osal_memcpy(buffer, pkt->cmd.Data, 4);
   \   00001B                ; Setup parameters for call to function osal_memcpy
   \   00001B   EA           MOV     A,R2
   \   00001C   2422         ADD     A,#0x22
   \   00001E   F582         MOV     DPL,A
   \   000020   EB           MOV     A,R3
   \   000021   3400         ADDC    A,#0x0
   \   000023   F583         MOV     DPH,A
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F5..         MOV     ?V0 + 0,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V0 + 1,A
   \   00002C   75..00       MOV     ?V0 + 2,#0x0
   \   00002F   78..         MOV     R0,#?V0 + 0
   \   000031   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000034   7C04         MOV     R4,#0x4
   \   000036   7D00         MOV     R5,#0x0
   \   000038   7403         MOV     A,#0x3
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   AA82         MOV     R2,DPL
   \   00003F   AB83         MOV     R3,DPH
   \   000041   12....       LCALL   ??osal_memcpy?relay
   \   000044   7403         MOV     A,#0x3
   \   000046   12....       LCALL   ?DEALLOC_XSTACK8
    258              if(buffer[0] == '3')       
   \   000049   85..82       MOV     DPL,?XSP + 0
   \   00004C   85..83       MOV     DPH,?XSP + 1
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   6433         XRL     A,#0x33
   \   000052   701C         JNZ     ??Sound_MessageMSGCB_2
    259              {
    260                HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );;
   \   000054                ; Setup parameters for call to function HalLedSet
   \   000054   7A01         MOV     R2,#0x1
   \   000056   7901         MOV     R1,#0x1
   \   000058   12....       LCALL   ??HalLedSet?relay
    261                HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );;
   \   00005B                ; Setup parameters for call to function HalLedSet
   \   00005B   7A01         MOV     R2,#0x1
   \   00005D   7902         MOV     R1,#0x2
   \   00005F   12....       LCALL   ??HalLedSet?relay
    262                HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );;
   \   000062                ; Setup parameters for call to function HalLedSet
   \   000062   7A01         MOV     R2,#0x1
   \   000064   7904         MOV     R1,#0x4
   \   000066   12....       LCALL   ??HalLedSet?relay
    263                HalLedSet ( HAL_LED_4, HAL_LED_MODE_ON );;
   \   000069                ; Setup parameters for call to function HalLedSet
   \   000069   7A01         MOV     R2,#0x1
   \   00006B   7908         MOV     R1,#0x8
   \   00006D   12....       LCALL   ??HalLedSet?relay
    264              }
    265              if(buffer[0] == '4')       
   \                     ??Sound_MessageMSGCB_2:
   \   000070   85..82       MOV     DPL,?XSP + 0
   \   000073   85..83       MOV     DPH,?XSP + 1
   \   000076   E0           MOVX    A,@DPTR
   \   000077   6434         XRL     A,#0x34
   \   000079   701C         JNZ     ??Sound_MessageMSGCB_1
    266              {
    267                HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );;
   \   00007B                ; Setup parameters for call to function HalLedSet
   \   00007B   7A00         MOV     R2,#0x0
   \   00007D   7901         MOV     R1,#0x1
   \   00007F   12....       LCALL   ??HalLedSet?relay
    268                HalLedSet ( HAL_LED_2, HAL_LED_MODE_OFF );;
   \   000082                ; Setup parameters for call to function HalLedSet
   \   000082   7A00         MOV     R2,#0x0
   \   000084   7902         MOV     R1,#0x2
   \   000086   12....       LCALL   ??HalLedSet?relay
    269                HalLedSet ( HAL_LED_3, HAL_LED_MODE_OFF );;
   \   000089                ; Setup parameters for call to function HalLedSet
   \   000089   7A00         MOV     R2,#0x0
   \   00008B   7904         MOV     R1,#0x4
   \   00008D   12....       LCALL   ??HalLedSet?relay
    270                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );;
   \   000090                ; Setup parameters for call to function HalLedSet
   \   000090   7A00         MOV     R2,#0x0
   \   000092   7908         MOV     R1,#0x8
   \   000094   12....       LCALL   ??HalLedSet?relay
    271              }
    272              break;
    273            }
    274          }
   \                     ??Sound_MessageMSGCB_1:
   \   000097   7404         MOV     A,#0x4
   \   000099   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009C   7F03         MOV     R7,#0x3
   \   00009E   02....       LJMP    ?BANKED_LEAVE_XDATA
    275          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    276          void Sound_SendTheMessage(void)
   \                     Sound_SendTheMessage:
    277          { 
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 22
   \   000005   74EA         MOV     A,#-0x16
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    278            unsigned char theMessageData[10]="EndDevice";
   \   00000A   740C         MOV     A,#0xc
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   AC82         MOV     R4,DPL
   \   000011   AD83         MOV     R5,DPH
   \   000013   7583..       MOV     DPH,#(`?<Constant "EndDevice">` >> 8) & 0xff
   \   000016   7582..       MOV     DPL,#`?<Constant "EndDevice">` & 0xff
   \   000019   740A         MOV     A,#0xa
   \   00001B   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    279          
    280            afAddrType_t my_DstAddr;
    281          
    282            my_DstAddr.addrMode=(afAddrMode_t)Addr16Bit;
   \   00001E   7408         MOV     A,#0x8
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   7402         MOV     A,#0x2
   \   000025   F0           MOVX    @DPTR,A
    283            my_DstAddr.endPoint=Sound_ENDPOINT;
   \   000026   7409         MOV     A,#0x9
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   740A         MOV     A,#0xa
   \   00002D   F0           MOVX    @DPTR,A
    284            my_DstAddr.addr.shortAddr=0x0000; 
   \   00002E   85..82       MOV     DPL,?XSP + 0
   \   000031   85..83       MOV     DPH,?XSP + 1
   \   000034   E4           CLR     A
   \   000035   F0           MOVX    @DPTR,A
   \   000036   A3           INC     DPTR
   \   000037   F0           MOVX    @DPTR,A
    285          
    286          
    287            theMessageData[0]=flag;
   \   000038   90....       MOV     DPTR,#flag
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   C0E0         PUSH    A
   \   00003E   740C         MOV     A,#0xc
   \   000040   12....       LCALL   ?XSTACK_DISP0_8
   \   000043   D0E0         POP     A
   \   000045   F0           MOVX    @DPTR,A
    288          
    289            AF_DataRequest(&my_DstAddr
    290            ,&Sound_epDesc
    291            ,Sound_CLUSTERID
    292            ,osal_strlen("EndDevice")+1
    293            ,theMessageData
    294            ,&Sound_TransID
    295            ,AF_DISCV_ROUTE
    296            ,AF_DEFAULT_RADIUS);
   \   000046                ; Setup parameters for call to function AF_DataRequest
   \   000046   75..1E       MOV     ?V0 + 0,#0x1e
   \   000049   78..         MOV     R0,#?V0 + 0
   \   00004B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004E   75....       MOV     ?V0 + 0,#Sound_TransID & 0xff
   \   000051   75....       MOV     ?V0 + 1,#(Sound_TransID >> 8) & 0xff
   \   000054   78..         MOV     R0,#?V0 + 0
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000059   740F         MOV     A,#0xf
   \   00005B   12....       LCALL   ?XSTACK_DISP0_8
   \   00005E   8582..       MOV     ?V0 + 0,DPL
   \   000061   8583..       MOV     ?V0 + 1,DPH
   \   000064   78..         MOV     R0,#?V0 + 0
   \   000066   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000069                ; Setup parameters for call to function osal_strlen
   \   000069   7A..         MOV     R2,#`?<Constant "EndDevice">_1` & 0xff
   \   00006B   7B..         MOV     R3,#(`?<Constant "EndDevice">_1` >> 8) & 0xff
   \   00006D   12....       LCALL   ??osal_strlen?relay
   \   000070   EA           MOV     A,R2
   \   000071   2401         ADD     A,#0x1
   \   000073   F5..         MOV     ?V0 + 0,A
   \   000075   EB           MOV     A,R3
   \   000076   3400         ADDC    A,#0x0
   \   000078   F5..         MOV     ?V0 + 1,A
   \   00007A   78..         MOV     R0,#?V0 + 0
   \   00007C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007F   75..06       MOV     ?V0 + 0,#0x6
   \   000082   75..00       MOV     ?V0 + 1,#0x0
   \   000085   78..         MOV     R0,#?V0 + 0
   \   000087   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008A   7920         MOV     R1,#0x20
   \   00008C   7C..         MOV     R4,#Sound_epDesc & 0xff
   \   00008E   7D..         MOV     R5,#(Sound_epDesc >> 8) & 0xff
   \   000090   7409         MOV     A,#0x9
   \   000092   12....       LCALL   ?XSTACK_DISP0_8
   \   000095   AA82         MOV     R2,DPL
   \   000097   AB83         MOV     R3,DPH
   \   000099   12....       LCALL   ??AF_DataRequest?relay
   \   00009C   7409         MOV     A,#0x9
   \   00009E   12....       LCALL   ?DEALLOC_XSTACK8
    297          }
   \   0000A1   7416         MOV     A,#0x16
   \   0000A3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A6   7F02         MOV     R7,#0x2
   \   0000A8   02....       LJMP    ?BANKED_LEAVE_XDATA
    298          
    299          
    300          
    301          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    302          HAL_ISR_FUNCTION( halKeyPort1Isr, P1INT_VECTOR )
   \                     halKeyPort1Isr:
    303          {
   \   000000   C0E0         PUSH    A
   \   000002   74F2         MOV     A,#-0xe
   \   000004   12....       LCALL   ?INTERRUPT_ENTER_XSP
   \   000007                ; Saved register size: 14
   \   000007                ; Auto size: 0
    304            
    305            if (HAL_KEY_SW_7_PXIFG & HAL_KEY_SW_7_BIT)
   \   000007   E58A         MOV     A,0x8a
   \   000009   A2E3         MOV     C,0xE0 /* A   */.3
   \   00000B   5014         JNC     ??halKeyPort1Isr_0
    306            {
    307              flag='1';
   \   00000D   90....       MOV     DPTR,#flag
   \   000010   7431         MOV     A,#0x31
   \   000012   F0           MOVX    @DPTR,A
    308              Sound_SendTheMessage( );
   \   000013                ; Setup parameters for call to function Sound_SendTheMessage
   \   000013   12....       LCALL   ??Sound_SendTheMessage?relay
    309              flag='0';
   \   000016   90....       MOV     DPTR,#flag
   \   000019   7430         MOV     A,#0x30
   \   00001B   F0           MOVX    @DPTR,A
    310              P1IFG = 0;             //ЧхжаЖЯБъжО 
   \   00001C   758A00       MOV     0x8a,#0x0
    311              P1IF = 0;             //ЧхжаЖЯБъжО 
   \   00001F   C2EB         CLR     0xe8.3
    312            }
    313          }
   \                     ??halKeyPort1Isr_0:
   \   000021   7F01         MOV     R7,#0x1
   \   000023   02....       LJMP    ?INTERRUPT_LEAVE_XSP
   \   000026                REQUIRE P1IFG
   \   000026                REQUIRE _A_IRCON2

   \                                 In  segment INTVEC, offset 0x7b, root
   \                     `??halKeyPort1Isr??INTVEC 123`:
   \   00007B   02....       LJMP       (halKeyPort1Isr)

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for flag>`:
   \   000000   30           DB 48

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Sound_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Sound_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??InitKey2?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    InitKey2

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Sound_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Sound_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Sound_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Sound_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Sound_SendTheMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Sound_SendTheMessage

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EndDevice">`:
   \   000000   456E6444     DB "EndDevice"
   \            65766963
   \            6500    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EndDevice">_1`:
   \   000000   456E6444     DB "EndDevice"
   \            65766963
   \            6500    

   Maximum stack usage in bytes:

     Function                  ISTACK PSTACK XSTACK
     --------                  ------ ------ ------
     InitKey2                      0      0     12
     Sound_Init                    0      0      9
       -> afRegister               0      0     18
     Sound_MessageMSGCB            0      0     30
       -> osal_memcpy              0      0     36
       -> HalLedSet                0      0     30
       -> HalLedSet                0      0     30
       -> HalLedSet                0      0     30
       -> HalLedSet                0      0     30
       -> HalLedSet                0      0     30
       -> HalLedSet                0      0     30
       -> HalLedSet                0      0     30
       -> HalLedSet                0      0     30
     Sound_ProcessEvent            0      0     12
       -> osal_msg_receive         0      0     24
       -> Sound_MessageMSGCB       0      0     24
       -> osal_msg_deallocate      0      0     24
       -> osal_msg_receive         0      0     24
       -> osal_set_event           0      0     24
       -> InitKey2                 0      0     24
       -> Sound_SendTheMessage     0      0     24
       -> osal_start_timerEx       0      0     24
     Sound_SendTheMessage          2      0     55
       -> osal_strlen              0      0     74
       -> AF_DataRequest           0      0     82
     halKeyPort1Isr                0      0     14
       -> Sound_SendTheMessage     0      0     28


   Segment part sizes:

     Function/Label               Bytes
     --------------               -----
     P1IFG                           1
     PICTL                           1
     P1IEN                           1
     _A_P1                           1
     IEN2                            1
     _A_IEN0                         1
     _A_IRCON2                       1
     P1DIR                           1
     flag                            1
     Sound_ClusterList               2
     Sound_SimpleDesc               12
     TempDATA                        1
     Sound_epDesc                    6
     Sound_TaskID                    1
     Sound_TransID                   1
     Sound_NwkState                  1
     Sound_Init                     58
     InitKey2                       20
     Sound_ProcessEvent            157
     Sound_MessageMSGCB            161
     Sound_SendTheMessage          171
     halKeyPort1Isr                 38
     ??halKeyPort1Isr??INTVEC 123    3
     ?<Initializer for flag>         1
     ??Sound_Init?relay              6
     ??InitKey2?relay                6
     ??Sound_ProcessEvent?relay      6
     ??Sound_MessageMSGCB?relay      6
     ??Sound_SendTheMessage?relay    6
     ?<Constant "EndDevice">        10
     ?<Constant "EndDevice">_1      10

 
 567 bytes in segment BANKED_CODE
  30 bytes in segment BANK_RELAYS
   3 bytes in segment INTVEC
  38 bytes in segment NEAR_CODE
   8 bytes in segment SFR_AN
   1 byte  in segment XDATA_I
   1 byte  in segment XDATA_ID
  34 bytes in segment XDATA_ROM_C
  10 bytes in segment XDATA_Z
 
 636 bytes of CODE  memory (+ 3 bytes shared)
  34 bytes of CONST memory
   0 bytes of DATA  memory (+ 8 bytes shared)
  11 bytes of XDATA memory

Errors: none
Warnings: none

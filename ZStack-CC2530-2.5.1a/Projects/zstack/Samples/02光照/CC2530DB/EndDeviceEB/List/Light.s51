///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        10/Jul/2017  09:46:01 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\02Йтее\Source\Light /
//                          .c                                                /
//    Command line       =  -f F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC253 /
//                          0-2.5.1a\Projects\zstack\Samples\02Йтее\CC2530DB\ /
//                          ..\..\..\Tools\CC2530DB\f8wEndev.cfg (-DCPU32MHZ  /
//                          -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3        /
//                          -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f         /
//                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\02Йтее\CC2530DB\..\ /
//                          ..\..\Tools\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO   /
//                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      /
//                          -DDEFAULT_CHANLIST=0x00004000                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 F:\ДњТы\ДњТы\ZStack-CC2530 /
//                          -2.5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\Samp /
//                          les\02Йтее\Source\Light.c -D NWK_AUTO_POLL -D     /
//                          ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D             /
//                          MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D             /
//                          xPOWER_SAVING -lC F:\ДњТы\ДњТы\ZStack-CC2530-2.5. /
//                          1a\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\0 /
//                          2Йтее\CC2530DB\EndDeviceEB\List\ -lA              /
//                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\02Йтее\CC2530DB\End /
//                          DeviceEB\List\ --diag_suppress Pe001,Pa010 -o     /
//                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\02Йтее\CC2530DB\End /
//                          DeviceEB\Obj\ -e --no_code_motion --debug         /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\02Йтее\CC2530DB\    /
//                          -I F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC253 /
//                          0-2.5.1a\Projects\zstack\Samples\02Йтее\CC2530DB\ /
//                          ..\Source\ -I F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\Z /
//                          Stack-CC2530-2.5.1a\Projects\zstack\Samples\02Йте /
//                          е\CC2530DB\..\..\..\ZMain\TI2530DB\ -I            /
//                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\02Йтее\CC2530DB\..\ /
//                          ..\..\..\..\Components\hal\include\ -I            /
//                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\02Йтее\CC2530DB\..\ /
//                          ..\..\..\..\Components\hal\target\CC2530EB\ -I    /
//                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\02Йтее\CC2530DB\..\ /
//                          ..\..\..\..\Components\mac\include\ -I            /
//                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\02Йтее\CC2530DB\..\ /
//                          ..\..\..\..\Components\mac\high_level\ -I         /
//                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\02Йтее\CC2530DB\..\ /
//                          ..\..\..\..\Components\mac\low_level\srf04\ -I    /
//                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\02Йтее\CC2530DB\..\ /
//                          ..\..\..\..\Components\mac\low_level\srf04\single /
//                          _chip\ -I F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStac /
//                          k-CC2530-2.5.1a\Projects\zstack\Samples\02Йтее\CC /
//                          2530DB\..\..\..\..\..\Components\mt\ -I           /
//                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\02Йтее\CC2530DB\..\ /
//                          ..\..\..\..\Components\osal\include\ -I           /
//                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\02Йтее\CC2530DB\..\ /
//                          ..\..\..\..\Components\services\saddr\ -I         /
//                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\02Йтее\CC2530DB\..\ /
//                          ..\..\..\..\Components\services\sdata\ -I         /
//                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\02Йтее\CC2530DB\..\ /
//                          ..\..\..\..\Components\stack\af\ -I               /
//                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\02Йтее\CC2530DB\..\ /
//                          ..\..\..\..\Components\stack\nwk\ -I              /
//                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\02Йтее\CC2530DB\..\ /
//                          ..\..\..\..\Components\stack\sapi\ -I             /
//                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\02Йтее\CC2530DB\..\ /
//                          ..\..\..\..\Components\stack\sec\ -I              /
//                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\02Йтее\CC2530DB\..\ /
//                          ..\..\..\..\Components\stack\sys\ -I              /
//                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\02Йтее\CC2530DB\..\ /
//                          ..\..\..\..\Components\stack\zdo\ -I              /
//                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\02Йтее\CC2530DB\..\ /
//                          ..\..\..\..\Components\zmac\ -I                   /
//                          F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\02Йтее\CC2530DB\..\ /
//                          ..\..\..\..\Components\zmac\f8w\ -Ohz             /
//                          --require_prototypes                              /
//    List file          =  F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\02Йтее\CC2530DB\End /
//                          DeviceEB\List\Light.s51                           /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME Light

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FLT_DIV
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?L_TO_FLT
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?R2345_FLT_TO_L
        EXTERN ?S_DIV_MOD
        EXTERN ?V0
        EXTERN ?XLOAD_R2345
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??Light_Init?relay
        FUNCTION ??Light_Init?relay,0203H
        PUBLIC ??Light_MessageMSGCB?relay
        FUNCTION ??Light_MessageMSGCB?relay,0203H
        PUBLIC ??Light_ProcessEvent?relay
        FUNCTION ??Light_ProcessEvent?relay,0203H
        PUBLIC ??Light_SendTheMessage?relay
        FUNCTION ??Light_SendTheMessage?relay,0203H
        PUBLIC Light_ClusterList
        PUBLIC Light_Init
        FUNCTION Light_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Light_MessageMSGCB
        FUNCTION Light_MessageMSGCB,021203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 18, STACK
        PUBLIC Light_NwkState
        PUBLIC Light_ProcessEvent
        FUNCTION Light_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC Light_SendTheMessage
        FUNCTION Light_SendTheMessage,021203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 43, STACK
        PUBLIC Light_SimpleDesc
        PUBLIC Light_TaskID
        PUBLIC Light_TransID
        PUBLIC Light_epDesc
        PUBLIC TempDATA
        PUBWEAK _A_P1
        PUBWEAK __Constant_3fc00000
        PUBLIC fLight
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
afRegister          SYMBOL "afRegister"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_set_event      SYMBOL "osal_set_event"
Init_BH1750         SYMBOL "Init_BH1750"
Single_Write_BH1750 SYMBOL "Single_Write_BH1750"
delay_nms           SYMBOL "delay_nms"
Multiple_Read       SYMBOL "Multiple_Read"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
osal_memcpy         SYMBOL "osal_memcpy"
HalLedSet           SYMBOL "HalLedSet"
osal_strlen         SYMBOL "osal_strlen"
AF_DataRequest      SYMBOL "AF_DataRequest"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
??Init_BH1750?relay SYMBOL "?relay", Init_BH1750
??Multiple_Read?relay SYMBOL "?relay", Multiple_Read
??Single_Write_BH1750?relay SYMBOL "?relay", Single_Write_BH1750
??afRegister?relay  SYMBOL "?relay", afRegister
??delay_nms?relay   SYMBOL "?relay", delay_nms
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_set_event?relay SYMBOL "?relay", osal_set_event
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??osal_strlen?relay SYMBOL "?relay", osal_strlen
Light_Init          SYMBOL "Light_Init"
??Light_Init?relay  SYMBOL "?relay", Light_Init
Light_MessageMSGCB  SYMBOL "Light_MessageMSGCB"
??Light_MessageMSGCB?relay SYMBOL "?relay", Light_MessageMSGCB
Light_ProcessEvent  SYMBOL "Light_ProcessEvent"
??Light_ProcessEvent?relay SYMBOL "?relay", Light_ProcessEvent
Light_SendTheMessage SYMBOL "Light_SendTheMessage"
??Light_SendTheMessage?relay SYMBOL "?relay", Light_SendTheMessage

        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Init_BH1750
        FUNCTION Init_BH1750,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Single_Write_BH1750
        FUNCTION Single_Write_BH1750,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN delay_nms
        FUNCTION delay_nms,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Multiple_Read
        FUNCTION Multiple_Read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_strlen
        FUNCTION osal_strlen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??Init_BH1750?relay
        FUNCTION ??Init_BH1750?relay,00H
        EXTERN ??Multiple_Read?relay
        FUNCTION ??Multiple_Read?relay,00H
        EXTERN ??Single_Write_BH1750?relay
        FUNCTION ??Single_Write_BH1750?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??delay_nms?relay
        FUNCTION ??delay_nms?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_set_event?relay
        FUNCTION ??osal_set_event?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??osal_strlen?relay
        FUNCTION ??osal_strlen?relay,00H
        EXTERN BUF
        EXTERN dis_data

// F:\ДњТы\ДњТы\ZStack-CC2530-2.5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02Йтее\Source\Light.c
//    1 #include "OSAL.h"
//    2 #include "AF.h"
//    3 #include "ZDApp.h"
//    4 #include "ZDObject.h"
//    5 #include "ZDProfile.h"
//    6 #include <string.h>
//    7 //#include "Common.h"
//    8 #include "DebugTrace.h"
//    9 #include "Light.h"
//   10 #include "MT.h"
//   11 
//   12 #if !defined( WIN32 )
//   13   #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1
//   14 #endif
//   15 
//   16 /* HAL */
//   17 #include "hal_lcd.h"
//   18 #include "hal_led.h"
//   19 #include "hal_key.h"
//   20 #include "hal_uart.h"
//   21 #include "mt_uart.h"
//   22 
//   23 #include "BH1750.h"
//   24 #define SEND_DATA_EVENT 0x01

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//   25 float fLight;
fLight:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//   26 const cId_t Light_ClusterList[Light_MAX_CLUSTERS] =
Light_ClusterList:
        DW 7
//   27 {
//   28   Light_CLUSTERID
//   29 };
//   30 
//   31 
//   32 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   33 const SimpleDescriptionFormat_t Light_SimpleDesc =
Light_SimpleDesc:
        DB 10
        DATA16
        DW 3844
        DW 1
        DATA8
        DB 0
        DB 0
        DATA16
        DW 0H
        DATA8
        DB 1
        DATA16
        DW Light_ClusterList
//   34 {
//   35   Light_ENDPOINT,              //  int Endpoint;
//   36   Light_PROFID,                //  uint16 AppProfId[2];
//   37   Light_DEVICEID,              //  uint16 AppDeviceId[2];
//   38   Light_DEVICE_VERSION,        //  int   AppDevVer:4;
//   39   Light_FLAGS,                 //  int   AppFlags:4;
//   40   
//   41   
//   42   0,          //  byte  AppNumInClusters;
//   43   (cId_t *)NULL,  //  byte *pAppInClusterList;
//   44   Light_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//   45   (cId_t *)Light_ClusterList   //  byte *pAppInClusterList;
//   46 };
//   47 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   48 unsigned char TempDATA;
TempDATA:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   49 endPointDesc_t Light_epDesc;
Light_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   50 byte Light_TaskID;
Light_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   51 byte Light_TransID;
Light_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   52 devStates_t Light_NwkState;
Light_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   53 void Light_MessageMSGCB(afIncomingMSGPacket_t *MSGpkt);
//   54 void Light_SendTheMessage(void);
//   55 
//   56 
//   57 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   58 void Light_Init( byte task_id )
Light_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function Light_Init
        CODE
//   59 {
        FUNCALL Light_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//   60   halUARTCfg_t uartConfig;//ДЎПк
//   61     
//   62   Light_TaskID = task_id;
        MOV     DPTR,#Light_TaskID
        MOVX    @DPTR,A
//   63   Light_NwkState=DEV_INIT;
        MOV     DPTR,#Light_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//   64   Light_TransID = 0;
        MOV     DPTR,#Light_TransID
        CLR     A
        MOVX    @DPTR,A
//   65 
//   66   
//   67   Light_epDesc.endPoint = Light_ENDPOINT;
        MOV     DPTR,#Light_epDesc
        MOV     A,#0xa
        MOVX    @DPTR,A
//   68   Light_epDesc.task_id = &Light_TaskID;
        INC     DPTR
        MOV     A,#Light_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(Light_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//   69   Light_epDesc.simpleDesc
//   70             = (SimpleDescriptionFormat_t *)&Light_SimpleDesc;
        INC     DPTR
        MOV     A,#Light_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(Light_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//   71   
//   72   Light_epDesc.latencyReq = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//   73   afRegister( &Light_epDesc ); 
        ; Setup parameters for call to function afRegister
        MOV     R2,#Light_epDesc & 0xff
        MOV     R3,#(Light_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//   74 
//   75 }
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
//   76 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   77 UINT16 Light_ProcessEvent( byte task_id, UINT16 events )
Light_ProcessEvent:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function Light_ProcessEvent
        CODE
//   78 {
        FUNCALL Light_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Light_ProcessEvent, Light_MessageMSGCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Light_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Light_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Light_ProcessEvent, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Light_ProcessEvent, Init_BH1750
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Light_ProcessEvent, Single_Write_BH1750
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Light_ProcessEvent, Single_Write_BH1750
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Light_ProcessEvent, delay_nms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Light_ProcessEvent, Multiple_Read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Light_ProcessEvent, Light_SendTheMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Light_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//   79   afIncomingMSGPacket_t *MSGpkt;
//   80 
//   81   if ( events & SYS_EVENT_MSG )
        MOV     A,R3
        ANL     A,#0x80
        JZ      ??Light_ProcessEvent_0
//   82   {
//   83     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( Light_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??Light_ProcessEvent_1
//   84     while ( MSGpkt )
//   85     {
//   86       switch ( MSGpkt->hdr.event )
//   87       {
//   88        
//   89           case ZDO_STATE_CHANGE:
//   90             Light_NwkState = (devStates_t)(MSGpkt->hdr.status);
//   91             if(Light_NwkState==DEV_END_DEVICE)
//   92             {
//   93               P1_0=~P1_0;
//   94               osal_set_event(Light_TaskID,SEND_DATA_EVENT);
//   95             }
//   96             break;
//   97            
//   98            case AF_INCOMING_MSG_CMD:
//   99              Light_MessageMSGCB( MSGpkt );//аТМгЕФаХЯЂНгЪеКЏЪ§
??Light_ProcessEvent_2:
        ; Setup parameters for call to function Light_MessageMSGCB
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??Light_MessageMSGCB?relay
//  100              break;
//  101         
//  102           default:
//  103             break;
//  104       }
//  105       osal_msg_deallocate( (uint8 *)MSGpkt );
??Light_ProcessEvent_3:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_msg_deallocate?relay
//  106       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( Light_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??Light_ProcessEvent_1:
        MOV     DPTR,#Light_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
        MOV     A,R6
        ORL     A,R7
        JZ      ??Light_ProcessEvent_4
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??Light_ProcessEvent_2
        ADD     A,#0x49
        JNZ     ??Light_ProcessEvent_3
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#Light_NwkState
        MOVX    @DPTR,A
        XRL     A,#0x6
        JNZ     ??Light_ProcessEvent_3
        SETB    B.0
        MOV     C,0x90.0
        JNB     B.0,??Light_ProcessEvent_5
        CPL     C
??Light_ProcessEvent_5:
        MOV     0x90.0,C
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#Light_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay
        SJMP    ??Light_ProcessEvent_3
//  107     }
//  108     // return unprocessed events
//  109     return (events ^ SYS_EVENT_MSG);
??Light_ProcessEvent_4:
        MOV     R2,?V0 + 0
        MOV     A,?V0 + 1
        XRL     A,#0x80
        MOV     R3,A
        SJMP    ??Light_ProcessEvent_6
//  110   }
//  111   if(events&SEND_DATA_EVENT)
??Light_ProcessEvent_0:
        MOV     A,R2
        MOV     C,0xE0 /* A   */.0
        JNC     ??Light_ProcessEvent_7
//  112   {
//  113     Init_BH1750();       //ГѕЪМЛЏBH1750
        ; Setup parameters for call to function Init_BH1750
        LCALL   ??Init_BH1750?relay
//  114     Single_Write_BH1750(0x02);   // power on
        ; Setup parameters for call to function Single_Write_BH1750
        MOV     R1,#0x2
        LCALL   ??Single_Write_BH1750?relay
//  115     Single_Write_BH1750(0x10);   // H- resolution mode
        ; Setup parameters for call to function Single_Write_BH1750
        MOV     R1,#0x10
        LCALL   ??Single_Write_BH1750?relay
//  116 
//  117     delay_nms(180);              //бгЪБ180ms
        ; Setup parameters for call to function delay_nms
        MOV     R2,#-0x4c
        MOV     R3,#0x0
        LCALL   ??delay_nms?relay
//  118     Multiple_Read();       //СЌајЖСГіЪ§ОнЃЌДцДЂдкBUFжа
        ; Setup parameters for call to function Multiple_Read
        LCALL   ??Multiple_Read?relay
//  119 
//  120     dis_data=BUF[0];
//  121     dis_data=(dis_data<<8)+BUF[1];//КЯГЩЪ§ОнЃЌМДЙтееЪ§Он
        MOV     DPTR,#BUF
        MOVX    A,@DPTR
        MOV     R1,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        CLR     A
        ADD     A,R2
        MOV     DPTR,#dis_data
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  122 
//  123     fLight = (float)dis_data/1.5;
        MOV     DPTR,#dis_data
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     ?V0 + 6,A
        MOV     ?V0 + 7,A
        MOV     R0,#?V0 + 4
        LCALL   ?L_TO_FLT
        MOV     DPTR,#__Constant_3fc00000
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_DIV
        MOV     DPTR,#fLight
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
//  124     Light_SendTheMessage();
        ; Setup parameters for call to function Light_SendTheMessage
        LCALL   ??Light_SendTheMessage?relay
//  125     osal_start_timerEx(Light_TaskID,SEND_DATA_EVENT,3000);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x48
        MOV     R5,#0xb
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#Light_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  126     return(events^SEND_DATA_EVENT);
        MOV     A,?V0 + 0
        XRL     A,#0x1
        MOV     R2,A
        MOV     R3,?V0 + 1
        SJMP    ??Light_ProcessEvent_6
//  127   }
//  128   return 0;
??Light_ProcessEvent_7:
        MOV     R2,#0x0
        MOV     R3,#0x0
??Light_ProcessEvent_6:
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
        REQUIRE _A_P1
//  129 }
//  130 
//  131 //НгЪеЕНЯћЯЂНјааДІРэЕФКЏЪ§

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  132 void Light_MessageMSGCB( afIncomingMSGPacket_t *pkt )
Light_MessageMSGCB:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function Light_MessageMSGCB
        CODE
//  133 {
        FUNCALL Light_MessageMSGCB, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Light_MessageMSGCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Light_MessageMSGCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Light_MessageMSGCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Light_MessageMSGCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Light_MessageMSGCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Light_MessageMSGCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Light_MessageMSGCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Light_MessageMSGCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
//  134   unsigned char buffer[4]; 
//  135   switch ( pkt->clusterId )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x3
        JNZ     ??Light_MessageMSGCB_0
        INC     DPTR
        MOVX    A,@DPTR
??Light_MessageMSGCB_0:
        JNZ     ??Light_MessageMSGCB_1
//  136   {
//  137   case Double_CLUSTERID:
//  138     osal_memcpy(buffer, pkt->cmd.Data, 4);
        ; Setup parameters for call to function osal_memcpy
        MOV     A,R2
        ADD     A,#0x22
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
//  139     if(buffer[0] == '4')       
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0x34
        JNZ     ??Light_MessageMSGCB_2
//  140     {
//  141       HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );;
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
//  142       HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );;
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x2
        LCALL   ??HalLedSet?relay
//  143       HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );;
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x4
        LCALL   ??HalLedSet?relay
//  144       HalLedSet ( HAL_LED_4, HAL_LED_MODE_ON );;
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
//  145     }
//  146     if(buffer[0] == '5')       
??Light_MessageMSGCB_2:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0x35
        JNZ     ??Light_MessageMSGCB_1
//  147     {
//  148       HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );;
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
//  149       HalLedSet ( HAL_LED_2, HAL_LED_MODE_OFF );;
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x2
        LCALL   ??HalLedSet?relay
//  150       HalLedSet ( HAL_LED_3, HAL_LED_MODE_OFF );;
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x4
        LCALL   ??HalLedSet?relay
//  151       HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );;
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
//  152     }
//  153     break;
//  154   }
//  155 }
??Light_MessageMSGCB_1:
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//  156 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  157 void Light_SendTheMessage(void)
Light_SendTheMessage:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function Light_SendTheMessage
        CODE
//  158 { 
        FUNCALL Light_SendTheMessage, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Light_SendTheMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 22
        MOV     A,#-0x16
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
//  159   unsigned char theMessageData[10]="EndDevice";
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant "EndDevice">` >> 8) & 0xff
        MOV     DPL,#`?<Constant "EndDevice">` & 0xff
        MOV     A,#0xa
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  160 
//  161   afAddrType_t my_DstAddr;
//  162 
//  163   my_DstAddr.addrMode=(afAddrMode_t)Addr16Bit;
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  164   my_DstAddr.endPoint=Light_ENDPOINT;
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xa
        MOVX    @DPTR,A
//  165   my_DstAddr.addr.shortAddr=0x0000; 
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  166 
//  167 
//  168   theMessageData[0]='0'+(int)fLight/100;
        MOV     DPTR,#fLight
        LCALL   ?XLOAD_R2345
        LCALL   ?R2345_FLT_TO_L
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     A,R0
        ADD     A,#0x30
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  169   theMessageData[1]='0'+((int)fLight-(int)fLight/100*100)/10;
        MOV     A,R0
        MOV     B,#0x64
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#0x64
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,R4
        CLR     C
        SUBB    A,R0
        MOV     R0,A
        MOV     A,R5
        SUBB    A,R1
        MOV     R1,A
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     A,R0
        ADD     A,#0x30
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  170   theMessageData[2]='0'+(int)fLight%10;
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     A,R2
        ADD     A,#0x30
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  171 
//  172   AF_DataRequest(&my_DstAddr
//  173   ,&Light_epDesc
//  174   ,Light_CLUSTERID
//  175   ,osal_strlen("EndDevice")+1
//  176   ,theMessageData
//  177   ,&Light_TransID
//  178   ,AF_DISCV_ROUTE
//  179   ,AF_DEFAULT_RADIUS);
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 35)
        MOV     ?V0 + 0,#Light_TransID & 0xff
        MOV     ?V0 + 1,#(Light_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 37)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 39)
        ; Setup parameters for call to function osal_strlen
        MOV     R2,#`?<Constant "EndDevice">_1` & 0xff
        MOV     R3,#(`?<Constant "EndDevice">_1` >> 8) & 0xff
        LCALL   ??osal_strlen?relay
        MOV     A,R2
        ADD     A,#0x1
        MOV     ?V0 + 0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 41)
        MOV     ?V0 + 0,#0x7
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 43)
        MOV     R1,#0x20
        MOV     R4,#Light_epDesc & 0xff
        MOV     R5,#(Light_epDesc >> 8) & 0xff
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
//  180 }
        MOV     A,#0x16
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock3

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Light_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Light_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Light_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Light_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Light_MessageMSGCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Light_MessageMSGCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Light_SendTheMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Light_SendTheMessage

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "EndDevice">`:
        DB "EndDevice"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "EndDevice">_1`:
        DB "EndDevice"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3fc00000:
        DD 3FC00000H

        END
//  181 
//  182 
// 
// 707 bytes in segment BANKED_CODE
//  24 bytes in segment BANK_RELAYS
//   1 byte  in segment SFR_AN
//  38 bytes in segment XDATA_ROM_C
//  14 bytes in segment XDATA_Z
// 
// 731 bytes of CODE  memory
//  34 bytes of CONST memory (+ 4 bytes shared)
//   0 bytes of DATA  memory (+ 1 byte  shared)
//  14 bytes of XDATA memory
//
//Errors: none
//Warnings: none
